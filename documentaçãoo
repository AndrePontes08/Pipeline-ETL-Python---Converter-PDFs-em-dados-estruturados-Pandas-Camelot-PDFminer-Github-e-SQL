
### **1. Bibliotecas Importadas**
```python
import os
import camelot
import pandas as pd
import logging
from unidecode import unidecode
from configs.rules.notas import rules_dict
from configs.tools.postgre import RDSPostgreSQLManager
```
- **os**: Manipula caminhos e diretórios de arquivos.
- **camelot**: Extrai tabelas de PDFs.
- **pandas**: Manipulação de dados tabulares.
- **logging**: Gera logs para depuração e monitoramento.
- **unidecode**: Remove acentos dos nomes das colunas.
- **rules_dict**: Dicionário de regras de extração específicas para diferentes PDFs.
- **RDSPostgreSQLManager**: Gerencia conexões com o banco de dados PostgreSQL.

---

### **2. Configuração de Logging**
```python
logging.basicConfig(level=logging.INFO)
```
Define o nível de log para exibir mensagens de **INFO** ou superiores.

---

## **Classe `PDFTableExtractor`**
Classe principal que extrai, processa e armazena os dados de tabelas extraídas de um PDF.

### **Método `__init__`**
```python
def __init__(self, file_name, configs):
    self.path = os.path.abspath(f"venv_etl/files/pdf/{configs["name"].lower()}/{file_name}.pdf")
    self.csv_path = os.path.abspath(f"venv_etl/files/csv/")
    self.file_name = file_name
    self.configs = configs
```
- **Define caminhos para o arquivo PDF e a pasta de CSVs.**
- **`configs`**: Contém as regras de extração do PDF (definidas em `rules_dict`).
- **`file_name`**: Nome do arquivo PDF a ser processado.

---

### **Método `start()`**
```python
def start(self):
    logging.info(f"Start pdf - {self.file_name}")

    header = self.get_table_data(self.configs["header_table_areas"], self.configs["header_columns"],self.configs["header_fix"])
    main = self.get_table_data(self.configs["table_areas"], self.configs["columns"],self.configs["fix"])
    small = self.get_table_data(self.configs["small_table_areas"], self.configs["small_columns"],self.configs["small_fix"])

    main = self.add_infos(header, main)
    small = self.add_infos(header, small)

    main = self.sanitize_column_names(main)
    if self.configs["small_sanitize"]:
        small = self.sanitize_column_names(small)

    logging.info(f"Saving csv - {self.file_name}")
    self.save_csv(main, self.file_name)
    self.save_csv(small, f"{self.file_name}_small")

    logging.info(f"Sending to DB - {self.file_name}")
    self.send_to_db(main, f"Fatura_{self.configs['name']}".lower())
    self.send_to_db(small, f"Fatura_{self.configs['name']}_small".lower())

    return {"main": main, "small": small}
```
1. **Extrai tabelas do PDF usando `get_table_data`** para:
   - Cabeçalho (`header`)
   - Conteúdo principal (`main`)
   - Pequenas tabelas auxiliares (`small`)
   
2. **Adiciona informações do cabeçalho às tabelas (`add_infos`).**
3. **Normaliza os nomes das colunas (`sanitize_column_names`).**
4. **Salva os dados como CSV (`save_csv`).**
5. **Envia os dados para o banco PostgreSQL (`send_to_db`).**
6. **Retorna um dicionário com os DataFrames extraídos.**

---

### **Método `get_table_data()`**
```python
def get_table_data(self, table_areas, table_columns, fix=True):
    tables = camelot.read_pdf(
        self.path,
        flavor=self.configs["flavor"],
        table_areas=table_areas,
        columns=table_columns,
        strip_text=self.configs["strip_text"],
        pages=self.configs["pages"],
        password=self.configs["password"],
    )

    table_content = [self.fix_header(page.df) if fix else page.df for page in tables]

    result = pd.concat(table_content, ignore_index=True) if len(table_content) > 1 else table_content[0]
    return result
```
- **Usa `camelot.read_pdf` para extrair tabelas** do PDF.
- **Os parâmetros `table_areas` e `columns` definem a posição das tabelas.**
- **Se `fix=True`, ajusta o cabeçalho das tabelas (`fix_header`).**
- **Concatena múltiplas páginas, se houver.**
- **Retorna um DataFrame com a tabela extraída.**

---

### **Método `save_csv()`**
```python
def save_csv(self, df, file_name):
    if not os.path.exists(self.csv_path):
        os.makedirs(self.csv_path, exist_ok=True)
    path = os.path.join(self.csv_path, f"{file_name}.csv")
    df.to_csv(path, sep=";", index=False)
```
- **Cria a pasta de CSVs, se não existir.**
- **Salva o DataFrame em um arquivo `.csv`.**

---

### **Método `add_infos()`**
```python
def add_infos(self, header, content):
    infos = header.iloc[0]
    df = pd.DataFrame([infos.values] * len(content), columns=header.columns)
    content = pd.concat([content.reset_index(drop=True), df.reset_index(drop=True)], axis=1)
    content["Data de Inserção"] = pd.Timestamp('today').normalize()
    return content
```
- **Adiciona as informações do cabeçalho a todas as linhas da tabela `content`.**
- **Inclui uma coluna `"Data de Inserção"` com a data atual.**

---

### **Método `fix_header()`**
```python
@staticmethod
def fix_header(df):
    df.columns = df.iloc[0]
    df = df.drop(0)
    df = df.drop(df.columns[0], axis=1)
    return df
```
- **Corrige o cabeçalho da tabela extraída:**
  - Usa a primeira linha como nome das colunas.
  - Remove a linha duplicada.
  - Remove a primeira coluna desnecessária.

---

### **Método `sanitize_column_names()`**
```python
def sanitize_column_names(self, df):
    df.columns = df.columns.map(lambda x: unidecode(x))
    df.columns = df.columns.str.replace(' ', '_')
    df.columns = df.columns.str.replace(r'\W', '', regex=True)
    df.columns = df.columns.str.lower()
    return df
```
- **Normaliza os nomes das colunas:**
  - Remove acentos (`unidecode`).
  - Substitui espaços por `_`.
  - Remove caracteres especiais (`\W`).
  - Converte para minúsculas.

---

### **Método `send_to_db()`**
```python
@staticmethod
def send_to_db(df, table_name):
    try:
        connection = RDSPostgreSQLManager().alchemy()
        df.to_sql(table_name, connection, if_exists="append", index=False)
        logging.info(f"Success to save into {table_name}")
    except Exception as e:
        logging.error(e)
```
- **Conecta ao PostgreSQL usando `RDSPostgreSQLManager`.**
- **Insere os dados na tabela SQL correspondente (`to_sql`).**
- **Se houver erro, exibe uma mensagem no log.**

---

## **Função `list_files()`**
```python
def list_files(folder):
    try:
        files = [os.path.splitext(f)[0] for f in os.listdir(folder) if os.path.isfile(os.path.join(folder, f))]
        return files
    except FileNotFoundError:
        logging.info(f"A pasta '{folder}' não foi encontrada.")
        return []
    except Exception as e:
        logging.info(f"Ocorreu um erro: {e}")
        return []
```
- **Lista os arquivos de um diretório, removendo a extensão.**
- **Retorna uma lista com os nomes dos arquivos.**
- **Trata erros caso o diretório não exista.**

---

## **Bloco `if __name__ == "__main__":`**
```python
if __name__ == "__main__":
    corretora = 'jornada'
    path = os.path.abspath(f"venv_etl/files/pdf/{corretora}/")
    files = list_files(path)
    
    for file in files:
        extractor = PDFTableExtractor(file, configs=rules_dict[corretora]).start()
    logging.info("Todos os arquivos foram processados")
```
- **Define a corretora (`corretora`).**
- **Lista os arquivos PDF na pasta correspondente.**
- **Processa cada arquivo chamando `PDFTableExtractor`.**
- **Exibe uma mensagem quando todos os arquivos forem processados.**

